**NOTE: THIS REPOSITORY CONTINUES TO BE UPDATED SINCE WE INTEND TO PURPOSE IT FOR FUTURE PORTFOLIO USE, BUT IT HAS MET THE REQUIREMENTS AS SPECIFIED BY THE CLASS**


These files compose the database creation, related functions for interacting with the database.
Here's the general structure of the data:
- there are stores, each with their own attributes
- the full Stores table is located in the central_db, as well as each of the two shards
- Vendors contains the information about each of the items in the store_id (note that the shards are split based off of store_id)
    - This table will be queried by store managers
- Customer_Portal contains the information about items in the stores relevant to customers
    - This table will be queried by users

Setting up the code:
- first need to set up MySQL & MySQL Workbench locally (I'd recommend to follow a YouTube video)
    - this is the video I used: https://youtu.be/u96rVINbAUI?si=D_yqLWbq3_UeGTHL
- Check that your Firewall isn't blocking MySQL
- Add MySQL to your PATH
- run central_creation.py, shard_creation.py
- To run app.py, you must specify the shapefile path or comment it out. Additionally, geopandas must be installed as well as folium and shapely.
- Geopandas can be installed as seen on video, by using anaconda navigator if pip install is not working
- The template folder houses the .html files for the app.py
- There is also a folder with the shapfile that can be added to the show_map function in app.py

Brief file descriptions:
- app.py --> web based GUI to create, delete, update stores as well as view them in a map. can modify inventory as well. used by store admin
- templates --> houses all of the html files. This includes for app.py as well as customer_interface.py
- tables_creation.txt --> details table schemas from script to create tables
- central_creation.py --> creates the database "central_db" that contains the stores and their information
- shard_creation.py --> creates the shard databases (currently only have two). creates Vendor, Customer_Portal, and Stores in each shard
- config.py --> stores connection information
- admin_actions --> this file contains the planned functions that admins (store operators) will use to interact with the data
- customer_actions --> this file contains the planned functions that customers will use to interact with the data
- customer_interface --> this file provides the interface through Flask for customers to interact with the database

Using the code:
- after setting up the code, you can run the app.py file to create stores, add inventory to stores
- customer_interface.py can be ran to query the inventory as a customer 
- sharding takes place over store codes in both of these instances, but all store information (excluding inventory) also stored in central_db 
